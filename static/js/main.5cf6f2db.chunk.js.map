{"version":3,"sources":["images/none.jpg","redux/movies/MovieTypes.js","redux/movies/MovieActions.js","Components/YearRange.js","Components/MyNavbar.js","redux/movies/DefaultPage.js","redux/rootReducer.js","redux/store.js","Components/MovieBox.js","Components/MovieModal.js","Components/Movies.js","Components/MoviesWrapper.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Types","storeData","payload","type","YearRange","componentDidMount","setState","value","props","year","ismounted","tempValue","state","inline","style","display","justifyContent","Form","this","useGrouping","placeholder","onValueChange","e","Number","varName","data","min","max","Date","getFullYear","Component","connect","filmStore","dispatch","MyNavbar","handleSearch","title","Navbar","letterSpacing","Brand","color","className","backgroundColor","paddingLeft","paddingRight","onChange","target","marginRight","marginLeft","fontSize","border","outline","label","onClick","onKeyDown","initialState","searchType","DefaultPage","action","rootReducer","combineReducers","store","createStore","MovieBox","openDetails","imdbID","src","Poster","require","alt","Title","Year","MovieModal","componentDidUpdate","prevProps","selectedFilmId","fetch","then","resp","json","response","selectedFilm","didMount","Modal","isOpen","MovieModalIsOpen","ModalHeader","ModalBody","Group","controlId","Label","Plot","Genre","Released","Director","Runtime","ModalFooter","icon","close_details","Movies","fetchData","pageNumber","totalRecords","rows","totalRecordes","datasource","Search","totalResults","products","loading","filmId","layout","first","itemTemplate","bind","onPage","setTimeout","event","product","header","renderHeader","lazy","paginator","paginatorPosition","MoviesWrapper","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5cf6f2db.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/none.44292c8e.jpg\";","export const Types = {\n\n  STORE_DATA:\"STORE_DATA\",\n\n \n\n};\n","\nimport {\n Types\n} from './MovieTypes'\n\nexport const storeData =   (payload) => {\n  return {\n    type: Types.STORE_DATA,\n    payload: payload\n  }\n  \n}\n\n\n\n","import React, { Component } from \"react\";\r\nimport { InputNumber } from \"primereact/inputnumber\";\r\nimport { connect } from \"react-redux\";\r\nimport { storeData } from \"../redux\";\r\nimport { Form } from \"react-bootstrap\";\r\n\r\n\r\nclass YearRange extends Component {\r\n  constructor(storeData) {\r\n    super();\r\n    this.state = {\r\n      ismounted: false,\r\n    };\r\n  }\r\n  componentDidMount = () => {\r\n    this.setState({\r\n      value: this.props.year,\r\n      ismounted: true,\r\n    });\r\n  };\r\n  tempValue = null;\r\n  render() {\r\n    return (\r\n      <div>\r\n      <div inline style = {{display: \"flex\",justifyContent: \"center\"}} >\r\n      <Form style = {{display: \"flex\",justifyContent: \"center\"}}>\r\n        {this.state.ismounted ? (\r\n          <InputNumber \r\n            useGrouping={false}\r\n            value={this.state.value}\r\n            placeholder=\"Enter Year (ex. 2019)\"\r\n            onValueChange={(e) => {\r\n              e.value == null\r\n                ? (this.tempValue = null)\r\n                : (this.tempValue = Number(e.value));\r\n              this.props.storeData({ varName: \"year\", data: this.tempValue });\r\n              this.setState({ value: this.tempValue });\r\n            }}\r\n            min={0}\r\n            max={new Date().getFullYear()}\r\n            \r\n          />\r\n          \r\n        ) : (\r\n          \"\"\r\n        )}\r\n        </Form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    year: state.filmStore.year,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    storeData: (data) => dispatch(storeData(data)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(YearRange);\r\n","import React, { Component } from \"react\";\nimport { Navbar, Form } from \"react-bootstrap\";\nimport { Button } from \"primereact/button\";\nimport { InputText } from \"primereact/inputtext\";\nimport { connect } from \"react-redux\";\nimport { storeData } from \"../redux\";\nimport YearRange from \"./YearRange\";\n\n\nclass MyNavbar extends Component {\n  constructor(storeData) {\n    super();\n    this.state = {\n      ismounted: false,\n    };\n  }\n  componentDidMount = () => {\n    this.setState({\n      ismounted: true,\n    });\n  };\n  handleSearch = () => {\n    this.props.storeData({ varName: \"title\", data: this.state.title });\n  };\n  render() {\n    return (\n      <div>\n        {this.state.ismounted ? (\n          <Navbar style = {{justifyContent:\"center\",letterSpacing:\"0.5rem\"}}>\n            <Navbar.Brand  style = {{color: \"whitesmoke\"}} className = \"navbar\" >\n              <h1>SEARCHFLIX</h1>\n            </Navbar.Brand>\n            \n            \n\n          </Navbar>\n          \n        ) : (\n          \"\"\n        )}\n        <div inline style = {{display: \"flex\",justifyContent: \"center\",backgroundColor: \"#001a33\"}} >\n            <Form style = {{paddingLeft : \"1%\",paddingRight : \"1%\",display: \"flex\",justifyContent: \"center\"}}>\n                <InputText\n                  value={this.state.title}\n                  placeholder=\"Lookup a movie...\"\n                  onChange={(e) => {\n                  this.setState({ title: e.target.value });\n                  }}\n                />\n            </Form>\n            <YearRange/>\n            <Button  className=\"p-button-raised p-button-rounded\" style={{marginRight: \"1%\",marginLeft: \"1%\",fontSize: \"80%\", justifyContent:\"center\",border:\"transparent\",outline: \"none\"}} label=\"Search\" onClick={this.handleSearch} onKeyDown={this.handleSearch}  />\n            </div>\n\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    storeData: (data) => dispatch(storeData(data)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyNavbar);\n","import {\n  Types\n } from './MovieTypes'\n\nconst initialState = {\n  searchType:null,\n  year:null,\n  title:\"Avengers\"\n};\n\n\nconst DefaultPage = (state = initialState, action) => {\n  switch (action.type) {\n  \n      case Types.STORE_DATA:\n      return {\n        ...state,\n      [action.payload.varName]:    action.payload.data,\n      };\n\n    \n    default:\n      return state;\n  }\n};\n\nexport default DefaultPage;\n","import { combineReducers } from 'redux'\n\nimport DefaultPage from './movies/DefaultPage'\n\nconst rootReducer = combineReducers({\n  filmStore: DefaultPage\n})\n\nexport default rootReducer\n","\nimport { createStore } from 'redux'\n\n\n\n\nimport rootReducer from './rootReducer'\n\nconst store = createStore(\n  rootReducer\n \n)\n\nexport default store","import React, { Component } from 'react'\n\nexport default class MovieBox extends Component {\n    render() {\n        return (\n            <div className=\"p-col-12 p-md-3\"\n            onClick={()=>this.props.openDetails(this.props.data.imdbID)}\n            >\n            <div className=\"movie-item card\">\n              <div className=\"movie-item-content\">\n                <img\n                  src={\n                    this.props.data.Poster === \"N/A\"\n                      ? require(\"../images/none.jpg\")\n                      : this.props.data.Poster\n                  }\n                  alt={this.props.data.Title}\n                />\n                <div className=\"movie-name\">{this.props.data.Title}</div>\n                <div className=\"movie-description\">{this.props.data.Year}</div>\n              </div>\n            </div>\n          </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport { Button } from \"primereact/button\";\nimport Form from \"react-bootstrap/Form\";\nexport default class MovieModal extends Component {\n  constructor() {\n    super();\n    this.state = {\n      didMount: false,\n    };\n  }\n  componentDidUpdate = (prevProps) => {\n    if (prevProps.selectedFilmId !== this.props.selectedFilmId) {\n      fetch(\n        `https://www.omdbapi.com/?i=${this.props.selectedFilmId}&apikey=7de47267`\n      )\n        .then((resp) => resp)\n        .then((resp) => resp.json())\n        .then((response) => {\n          this.setState({\n            selectedFilm: response,\n            didMount: true,\n          });\n        });\n    }\n  };\n  render() {\n    return (\n      <>\n        {this.state.didMount ? (\n          <Modal isOpen={this.props.MovieModalIsOpen}>\n            <ModalHeader className = \"modalHeader\"> {this.state.selectedFilm.Title} </ModalHeader>\n            <ModalBody className = \"popup\">\n              <Form.Group controlId=\"exampleForm.ControlInput1\">\n                <div\n                  className=\"movie-item-content\"\n                  style={{\n                    marginLeft:\n                      this.state.selectedFilm.Poster === \"N/A\" ? \"-5%\" : \"17%\",\n                  }}\n                >\n                  <img\n                    src={\n                      this.state.selectedFilm.Poster === \"N/A\"\n                        ? require(\"../images/none.jpg\")\n                        : this.state.selectedFilm.Poster\n                    }\n                    alt={this.state.selectedFilm.Title}\n                  />\n                </div>npm \n              </Form.Group>\n              <Form.Group controlId=\"exampleForm.ControlInput1\">\n                <Form.Label>\n                  {\" \"}\n                  Plot : {this.state.selectedFilm.Plot}\n                </Form.Label>\n              </Form.Group>\n\n              <Form.Group controlId=\"exampleForm.ControlInput1\">\n                <Form.Label>\n                  {\" \"}\n                  Genre: {this.state.selectedFilm.Genre}\n                </Form.Label>\n              </Form.Group>\n\n              <Form.Group controlId=\"exampleForm.ControlInput1\">\n                <Form.Label>\n                  {\" \"}\n                  Release Date : {this.state.selectedFilm.Released}\n                </Form.Label>\n              </Form.Group>\n\n              <Form.Group controlId=\"exampleForm.ControlInput1\">\n                <Form.Label>\n                  {\" \"}\n                  Director : {this.state.selectedFilm.Director}\n                </Form.Label>\n              </Form.Group>\n\n              <Form.Group controlId=\"exampleForm.ControlInput1\">\n                <Form.Label>\n                  {\" \"}\n                  Runtime : {this.state.selectedFilm.Runtime}\n                </Form.Label>\n              </Form.Group>\n            </ModalBody>\n            <ModalFooter className = \"modalFooter\">\n              <Button icon=\"pi pi-times\" onClick={this.props.close_details}></Button>\n            </ModalFooter>\n          </Modal>\n        ) : (\n          \"\"\n        )}\n      </>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { DataView } from \"primereact/dataview\";\nimport \"primereact/resources/themes/saga-blue/theme.css\";\nimport \"primereact/resources/primereact.min.css\";\nimport \"primeicons/primeicons.css\";\nimport \"primeflex/primeflex.css\";\nimport MovieBox from \"./MovieBox\";\nimport MovieModal from \"./MovieModal\";\n\nexport default class Movies extends Component {\n  constructor() {\n    super();\n    this.state = {\n      products: null,\n      layout: \"grid\",\n      loading: true,\n      first: 0,\n      totalRecords: 0,\n      MovieModalIsOpen: false,\n    };\n    this.rows = 10;\n\n    this.itemTemplate = this.itemTemplate.bind(this);\n    this.onPage = this.onPage.bind(this);\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.fetchData(1);\n    }, 1000);\n  }\n  componentDidUpdate(prevProps) {\n \n    if (\n      prevProps.title !== this.props.title ||\n      prevProps.year !== this.props.year ||\n      prevProps.searchType !== this.props.searchType\n    ) {\n   \n      setTimeout(() => {\n        this.fetchData(1);\n      }, 1000);\n    }\n  }\n  fetchData = (pageNumber) => {\n    return fetch(\n      `https://www.omdbapi.com/?s=${this.props.title}&apikey=7de47267&page=${pageNumber}&y=${this.props.year}&type=${\"movie\"}`\n    )\n      .then((resp) => resp)\n      .then((resp) => resp.json())\n      .then((response) => {\n     \n        if (response.totalRecords < 10) this.rows = response.totalRecordes;\n        else this.rows = 10;\n        this.datasource = response.Search;\n        this.setState({\n          totalRecords: Number(response.totalResults),\n          products: this.datasource,\n          loading: false,\n        });\n      });\n  };\n\n  // movie details\n  openDetails = (filmId) => {\n\n    this.setState({\n      MovieModalIsOpen: true,\n      selectedFilmId: filmId,\n    });\n  };\n  close_details = () => {\n    this.setState({\n      MovieModalIsOpen: false,\n    });\n  };\n  ///pagination controls\n  onPage(event) {\n    this.setState({\n      first: event.first,\n    });\n    // use page number to calculate index of first element in page\n    // divided by number of elemnt in each page add one (starts from 0)\n\n    this.fetchData(event.first / this.rows + 1);\n  }\n  \n// render as grid\n  itemTemplate(product, layout) {\n    if (!product) {\n      return \"\";\n    }\n    return (\n      <>\n          <MovieBox data={product} openDetails={this.openDetails} />\n      </>\n    );\n  }\n\n  renderHeader() {\n\n  \n  }\n\n  render() {\n    const header = this.renderHeader();\n\n    return (\n      <>\n        <div className=\"movie-grid\" >\n          <div className=\"card\" style = {{backgroundColor:\"#001a33\"}} >\n            <DataView \n              value={this.state.products}\n              layout={this.state.layout}\n              header={header}\n              itemTemplate={this.itemTemplate}\n              lazy\n              paginator\n              paginatorPosition={\"bottom\"}\n              rows={this.rows}\n              totalRecords={this.state.totalRecords}\n              first={this.state.first}\n              onPage={this.onPage}\n              loading={this.state.loading}\n            />\n          </div>\n        </div>\n\n        <MovieModal\n          close_details={this.close_details}\n          MovieModalIsOpen={this.state.MovieModalIsOpen}\n          selectedFilmId={this.state.selectedFilmId}\n        />\n      </>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { storeData } from \"../redux\";\nimport Movies from './Movies'\nclass MoviesWrapper extends Component {\n    constructor(storeData) {\n        super();\n        this.state = {\n          ismounted: false,\n        };\n      }\n      componentDidMount = () => {\n        this.setState({\n          ismounted: true,\n        });\n      };\n    render() {\n       \n        return (\n            <div style = {{backgroundColor:\"#001a33\"}} >\n                {this.state.ismounted?\n                <Movies  \n                year= {this.props.year}\n                title= {this.props.title}\n                searchType= {this.props.searchType}\n                \n                />:\"\"}\n            </div>\n        )\n    }\n}\nconst mapStateToProps = (state) => {\n  return {\n    year: state.filmStore.year,\n    title:state.filmStore.title,\n    searchType:state.filmStore.searchType\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    storeData: (data) => dispatch(storeData(data)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MoviesWrapper);\n","import React from \"react\";\nimport \"./App.css\";\n\nimport MyNavbar from \"./Components/MyNavbar\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport MoviesWrapper from \"./Components/MoviesWrapper\"\n\n\nfunction App() {\n  \n  return <Provider store={store}>\n\n   <div className=\"App\" >\n    <MyNavbar/>\n   <MoviesWrapper/>\n    </div>\n    </Provider>\n    ;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport  \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}